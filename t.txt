// portfolio/client/package.json
{
  "name": "nassim",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@reduxjs/toolkit": "^2.8.2",
    "@tailwindcss/vite": "^4.1.8",
    "axios": "^1.10.0",
    "browser-image-compression": "^2.0.2",
    "lottie-react": "^2.4.1",
    "lucide-react": "^0.513.0",
    "motion": "^12.16.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.6.2",
    "react-type-animation": "^3.2.0",
    "recharts": "^3.1.0",
    "sonner": "^2.0.6",
    "tailwindcss": "^4.1.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.5"
  }
}

// portfolio/client/src/App.jsx
import React, { useEffect, useState } from "react";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import { toast, Toaster } from "sonner";
import { useDispatch, useSelector } from "react-redux";
import axios from "axios";

import ScrollToTop from "./components/layouts/ScrollToTop.jsx";
import NavBar from "./components/layouts/NavBar.jsx";
import Footer from "./components/layouts/Footer.jsx";

import Portfolio from "./pages/Portfolio.jsx";
import Projects from "./components/portfolio/Projects.jsx";
import Dashboard from "./pages/Dashboard.jsx";
import Links from "./pages/Links.jsx";
import Cv from "./pages/Cv";

import NotFound from "./pages/NotFound.jsx";
import ServerError from "./pages/ServerError.jsx";

import DashboardInfos from "./components/dashboard/DashboardInfos.jsx";

import DashboardProjects from "./components/dashboard/DashboardProjects.jsx";
import DashboardAddProjects from "./components/dashboard/DashboardAddProjects.jsx";
import DashboardEditProject from "./components/dashboard/DashboardEditProject.jsx";

import DashboardExperiences from "./components/dashboard/DashboardExperiences.jsx";
import DashboardAddExperience from "./components/dashboard/DashboardAddExperience.jsx";
import DashboardEditExperience from "./components/dashboard/DashboardEditExperience.jsx";

import DashboardEducations from "./components/dashboard/DashboardEducations.jsx";
import DashboardAddEducation from "./components/dashboard/DashboardAddEducation.jsx";
import DashboardEditEducation from "./components/dashboard/DashboardEditEducation.jsx";

import DashboardAnalytics from "./components/dashboard/DashboardAnalytics.jsx";

import SignIn from "./components/dashboard/SignIn.jsx";

import Loading from "./components/styles/Loading.jsx";

import { clearAdmin, setAdmin } from "./features/adminSlice.js";
import { clearStats, setStats } from "./features/statsSlice.js";

const App = () => {
  const { admin } = useSelector((state) => state.admin);

  const [theme] = useState("dark");
  const [serverError, setServerError] = useState(false);

  const [loadingNassimInfo, setLoadingNassimInfo] = useState(true);
  const [loadingExperiences, setLoadingExperiences] = useState(true);
  const [loadingProjects, setLoadingProjects] = useState(true);
  const [loadingEducations, setLoadingEducations] = useState(true);
  const [loadingStats, setLoadingStats] = useState(true);

  const [infos, setInfos] = useState({});
  const [experiences, setExperiences] = useState([]);
  const [projects, setProjects] = useState([]);
  const [educations, setEducations] = useState([]);
  // const [stats, setStats] = useState({});

  const dispatch = useDispatch();

  // incriment visters stats
  const updateStatsIncrimentVisiters = async () => {
    try {
      // Determine device type
      const width = window.innerWidth;
      let device = "Desktop";
      if (width <= 768) device = "Mobile";
      else if (width > 768 && width <= 1024) device = "Tablet";

      // Current month abbreviation "Jul"
      const currentMonth = new Date().toLocaleString("default", {
        month: "short",
      });

      await axios.put(
        `${import.meta.env.VITE_SERVER_URI}/api/stats/incriment-visiters`,
        { device, currentMonth }
      );
    } catch (error) {
      if (!error.response) setServerError(true);
      toast.error(error?.response?.data?.message || error.message, {
        description: new Date().toUTCString(),
        action: { label: "✖️" },
      });
    }
  };

  const isValidToken = async (token) => {
    try {
      const response = await axios.post(
        `${import.meta.env.VITE_SERVER_URI}/api/auth/verify-token`,
        {},
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );
      // toast.success("Token is valid");
      return response.status === 200 && response.data.valid;
    } catch (error) {
      // toast.error("Token is invalid or expired");
      if (!error.response) setServerError(true);
      return false;
    }
  };

  // Fech Nassim's infos
  const getNassimInfos = async () => {
    try {
      setLoadingNassimInfo(true);
      const response = await axios.get(
        `${import.meta.env.VITE_SERVER_URI}/api/nassim`
      );
      setInfos(response.data);
    } catch (error) {
      if (!error.response) setServerError(true);
      toast.error(error?.response?.data?.message || error.message, {
        description: new Date().toUTCString(),
        action: { label: "✖️" },
      });
    } finally {
      setLoadingNassimInfo(false);
    }
  };

  // Fetch Experiences
  const getExperiences = async () => {
    try {
      setLoadingExperiences(true);
      const response = await axios.get(
        `${import.meta.env.VITE_SERVER_URI}/api/experiences`
      );
      setExperiences(response.data.reverse());
    } catch (error) {
      if (!error.response) setServerError(true);
      toast.error(error?.response?.data?.message || error.message, {
        description: new Date().toUTCString(),
        action: { label: "✖️" },
      });
    } finally {
      setLoadingExperiences(false);
    }
  };

  // Fech Projects
  const getProjects = async () => {
    try {
      setLoadingProjects(true);
      const response = await axios.get(
        `${import.meta.env.VITE_SERVER_URI}/api/projects`
      );
      setProjects(response.data.reverse());
    } catch (error) {
      if (!error.response) setServerError(true);
      toast.error(error?.response?.data?.message || error.message, {
        description: new Date().toUTCString(),
        action: { label: "✖️" },
      });
    } finally {
      setLoadingProjects(false);
    }
  };

  // Fech Education
  const getEducations = async () => {
    try {
      setLoadingEducations(true);
      const response = await axios.get(
        `${import.meta.env.VITE_SERVER_URI}/api/educations`
      );
      setEducations(response.data.reverse());
    } catch (error) {
      if (!error.response) setServerError(true);
      toast.error(error?.response?.data?.message || error.message, {
        description: new Date().toUTCString(),
        action: { label: "✖️" },
      });
    } finally {
      setLoadingEducations(false);
    }
  };

  // Fetch stats
  const getStats = async () => {
    setLoadingStats(true);
    try {
      const response = await axios.get(
        `${import.meta.env.VITE_SERVER_URI}/api/stats`
      );
      dispatch(setStats(response.data));
    } catch (error) {
      if (!error.response) setServerError(true);
      dispatch(clearStats());
      toast.error(error?.response?.data?.message || error.message, {
        description: new Date().toUTCString(),
        action: { label: "✖️" },
      });
    } finally {
      setLoadingStats(false);
    }
  };

  useEffect(() => {
    // check admin localStorage
    const adminStorage = JSON.parse(localStorage.getItem("admin"));

    // Check if the token is expired
    if (adminStorage && isValidToken(adminStorage?.token))
      dispatch(setAdmin(adminStorage));
    else dispatch(clearAdmin());

    // Fetch API
    updateStatsIncrimentVisiters();
    getStats();
    getNassimInfos();
    getProjects();
    getEducations();
    getExperiences();
  }, []);

  if (
    loadingNassimInfo ||
    loadingExperiences ||
    loadingProjects ||
    loadingEducations ||
    loadingStats
  )
    return (
      <div className="h-screen flex items-center justify-center overflow-hidden">
        <Toaster theme={theme} />
        <Loading size="md" />
      </div>
    );

  if (serverError)
    return (
      <>
        <ServerError />
        <Toaster theme={theme} />
      </>
    );

  return (
    <div className={theme}>
      <Toaster theme={theme} />
      <ScrollToTop />
      <BrowserRouter>
        <NavBar />
        <Routes>
          <Route
            path="/"
            element={
              <Portfolio
                personalData={infos}
                experiences={experiences}
                projects={projects}
                educations={educations}
              />
            }
          />
          <Route path="/cv" element={<Cv personalData={infos} />} />
          <Route path="/mycv" element={<Cv personalData={infos} />} />
          <Route path="/links" element={<Links personalData={infos} />} />

          <Route
            path="/projects"
            element={<Projects page={true} projects={projects} />}
          />

          <Route path="/admin">
            <Route path="auth">
              <Route path="" element={<SignIn />} />
            </Route>

            <Route path="dashboard">
              <Route path="" element={<Dashboard />} />

              {/* Infos */}
              <Route
                path="infos"
                element={
                  <DashboardInfos
                    infos={infos}
                    setInfos={setInfos}
                    loadingNassimInfo={loadingProjects}
                  />
                }
              />

              {/* Projects */}
              <Route
                path="projects"
                element={
                  <DashboardProjects
                    setProjects={setProjects}
                    projects={projects}
                    loadingProjects={loadingProjects}
                  />
                }
              />
              <Route
                path="add-project"
                element={
                  <DashboardAddProjects
                    projects={projects}
                    setProjects={setProjects}
                  />
                }
              />
              <Route
                path="edit-project/:id"
                element={
                  <DashboardEditProject
                    projects={projects}
                    experiences={experiences}
                    setProjects={setProjects}
                  />
                }
              />

              {/* Experiences */}
              <Route
                path="experiences"
                element={
                  <DashboardExperiences
                    setExperiences={setExperiences}
                    experiences={experiences}
                    loadingExperiences={loadingExperiences}
                  />
                }
              />
              <Route
                path="add-experience"
                element={
                  <DashboardAddExperience
                    experiences={experiences}
                    setExperiences={setExperiences}
                  />
                }
              />
              <Route
                path="edit-experience/:id"
                element={
                  <DashboardEditExperience
                    experiences={experiences}
                    setExperiences={setExperiences}
                  />
                }
              />

              {/* Educations */}
              <Route
                path="educations"
                element={
                  <DashboardEducations
                    educations={educations}
                    setEducations={setEducations}
                    loadingEducations={loadingEducations}
                  />
                }
              />
              <Route
                path="add-education"
                element={
                  <DashboardAddEducation
                    educations={educations}
                    setEducations={setEducations}
                    loadingEducations={loadingEducations}
                  />
                }
              />
              <Route
                path="edit-education/:id"
                element={
                  <DashboardEditEducation
                    educations={educations}
                    setEducations={setEducations}
                  />
                }
              />

              {/* Analytics */}
              <Route
                path="analytics"
                element={<DashboardAnalytics loadingStats={loadingStats} />}
              />
            </Route>
          </Route>

          <Route path="*" element={<NotFound />} />
        </Routes>
        <Footer personalData={infos} />
      </BrowserRouter>
    </div>
  );
};

export default App;

// Netlify deplopy
https://nassim.online

// portfolio/server/package.json
{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index",
    "dev": "nodemon index"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.16.4"
  }
}

// portfolio/server/index.json
require("dotenv").config();
const express = require("express");
const cors = require("cors");

const connectDB = require("./config/db");

const app = express();

// Middlewares
app.use(express.json());
app.use(cors());

// Routes
app.get("/test", (req, res) => {
  res.status(200).json({ website: "https://nassim.online" });
});
app.get("/", (req, res) => {
  res.status(200).redirect("https://nassim.online");
});

app.use("/api/auth", require("./routes/auth.route"));
app.use("/api/nassim", require("./routes/nassim.route"));
app.use("/api/experiences", require("./routes/experience.route"));
app.use("/api/projects", require("./routes/projects.route"));
app.use("/api/educations", require("./routes/education.route"));
app.use("/api/stats", require("./routes/stats.route"));
app.use("/api/activities", require("./routes/activitie.route"));

// Start server only after DB connection
const startServer = async () => {
  await connectDB();
  const port = process.env.PORT || 3000;
  app.listen(port, () =>
    console.log(`🚀 Server running at http://localhost:${port}`)
  );
};

startServer();

// server\vercel.json
{
  "version": 2,
  "builds": [{ "src": "index.js", "use": "@vercel/node" }],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "index.js"
    }
  ]
}
